package sysfs

import (
	"reflect"
	"testing"
)

func TestFS_CPUVulnerabilities(t *testing.T) {
	sysFs, err := NewFS(sysTestFixtures)
	if err != nil {
		t.Fatal(err)
	}

	tests := []struct {
		name    string
		want    []Vulnerability
		wantErr bool
	}{
		{"TestFS_CPUVulnerabilities", []Vulnerability{
			{CodeName: "itlb_multihit", State: "Not affected", Mitigation: ""},
			{CodeName: "retbleed", State: "Mitigation", Mitigation: "untrained return thunk; SMT enabled with STIBP protection"},
			{CodeName: "spec_store_bypass", State: "Mitigation", Mitigation: "Speculative Store Bypass disabled via prctl"},
			{CodeName: "spectre_v1", State: "Mitigation", Mitigation: "usercopy/swapgs barriers and __user pointer sanitization"},
			{CodeName: "spectre_v2", State: "Mitigation", Mitigation: "Retpolines, IBPB: conditional, STIBP: always-on, RSB filling, PBRSB-eIBRS: Not affected"},
			{CodeName: "tsx_async_abort", State: "Not affected", Mitigation: ""},
		}, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := sysFs.CPUVulnerabilities()
			if (err != nil) != tt.wantErr {
				t.Errorf("CPUVulnerabilities() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CPUVulnerabilities() got = %v, want %v", got, tt.want)
			}
		})
	}
}
